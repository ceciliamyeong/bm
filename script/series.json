import React, { useEffect, useMemo, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { TrendingUp, Activity } from "lucide-react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  ReferenceLine,
} from "recharts";

/**
 * BM20 Index Viewer (Linear/Log toggle)
 * -------------------------------------------------------
 * - Drop this component anywhere in your React app
 * - It fetches JSON time series and renders a LineChart
 * - Log scale toggle handles values <= 0 by clipping to a tiny epsilon
 * - Shows latest, MTD, YTD, from 2018-01-01 base
 */

const JSON_URL = "https://ceciliamyeong.github.io/bm/series.json"; // change if needed

const EPS = 1e-9;

function fmtNumber(n?: number | null, digits = 2) {
  if (n === undefined || n === null || Number.isNaN(n)) return "-";
  return new Intl.NumberFormat(undefined, { maximumFractionDigits: digits }).format(n);
}

function pct(a?: number | null) {
  if (a === undefined || a === null || Number.isNaN(a)) return "-";
  return `${(a * 100).toFixed(2)}%`;
}

export default function BM20IndexWidget() {
  const [raw, setRaw] = useState<Array<{ date: string; index: number }>>([]);
  const [scale, setScale] = useState<"linear" | "log">("log");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    setLoading(true);
    fetch(JSON_URL, { cache: "no-store" })
      .then((r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        return r.json();
      })
      .then((j) => {
        if (!mounted) return;
        // Accept two shapes: [{date, index}, ...] OR [ [date, index], ... ]
        const norm: Array<{ date: string; index: number }> = Array.isArray(j)
          ? j.map((row: any) => {
              if (Array.isArray(row)) return { date: row[0], index: Number(row[1]) };
              return { date: String(row.date), index: Number(row.index) };
            })
          : [];
        const cleaned = norm
          .filter((d) => d && d.date && Number.isFinite(d.index))
          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        setRaw(cleaned);
      })
      .catch((e) => setError(e.message))
      .finally(() => setLoading(false));
    return () => {
      mounted = false;
    };
  }, []);

  const data = useMemo(() => {
    return raw.map((d) => ({ ...d, idx_safe: Math.max(d.index, EPS) }));
  }, [raw]);

  const stats = useMemo(() => {
    if (data.length === 0) return { latest: null, mtd: null, ytd: null };
    const latest = data[data.length - 1];

    const lastMonthStart = new Date(latest.date);
    lastMonthStart.setDate(1);

    const yearStart = new Date(latest.date);
    yearStart.setMonth(0, 1);

    const findClosest = (d: Date) => {
      const t = d.getTime();
      let best = data[0];
      let bestDiff = Math.abs(new Date(best.date).getTime() - t);
      for (const x of data) {
        const diff = Math.abs(new Date(x.date).getTime() - t);
        if (diff < bestDiff) {
          best = x;
          bestDiff = diff;
        }
      }
      return best;
    };

    const m0 = findClosest(lastMonthStart);
    const y0 = findClosest(yearStart);

    const mtd = m0 && latest ? latest.index / m0.index - 1 : null;
    const ytd = y0 && latest ? latest.index / y0.index - 1 : null;

    return { latest: latest.index, mtd, ytd };
  }, [data]);

  const yAxisProps = scale === "log" ? { scale: "log", domain: ["auto", "auto"] as any } : { domain: ["auto", "auto"] as any };

  return (
    <div className="w-full max-w-5xl mx-auto p-4">
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-xl font-semibold flex items-center gap-2"><TrendingUp className="w-5 h-5"/>BM20 Index</h1>
        <div className="flex items-center gap-2">
          <Button variant={scale === "linear" ? "default" : "outline"} onClick={() => setScale("linear")}>Linear</Button>
          <Button variant={scale === "log" ? "default" : "outline"} onClick={() => setScale("log")}>Log</Button>
        </div>
      </div>

      <Card className="shadow-sm">
        <CardContent className="p-3">
          {loading && <div className="text-sm opacity-70">Loading seriesâ€¦</div>}
          {error && <div className="text-sm text-red-600">Failed to load: {error}</div>}
          {!loading && !error && (
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={data} margin={{ top: 10, right: 20, bottom: 0, left: 0 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" minTickGap={32} tick={{ fontSize: 12 }} />
                  <YAxis {...yAxisProps} tick={{ fontSize: 12 }} />
                  <Tooltip formatter={(v: any, name: any) => [fmtNumber(Number(v)), name]} />
                  <ReferenceLine y={100} strokeDasharray="4 4" />
                  <Line type="monotone" dataKey={scale === "log" ? "idx_safe" : "index"} dot={false} strokeWidth={1.6} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}
        </CardContent>
      </Card>

      <div className="grid grid-cols-3 gap-3 mt-3">
        <Card>
          <CardContent className="p-3 text-sm">
            <div className="opacity-70">Latest</div>
            <div className="text-lg font-semibold">{fmtNumber(stats.latest)}</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-3 text-sm">
            <div className="opacity-70">MTD</div>
            <div className="text-lg font-semibold">{pct(stats.mtd)}</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-3 text-sm">
            <div className="opacity-70">YTD</div>
            <div className="text-lg font-semibold">{pct(stats.ytd)}</div>
          </CardContent>
        </Card>
      </div>

      <div className="flex items-center gap-2 mt-3 text-sm opacity-70">
        <Activity className="w-4 h-4"/>
        <span>Y-axis scale is {scale}. Toggle for log view when long-run growth makes the chart look vertical.</span>
      </div>
    </div>
  );
}
