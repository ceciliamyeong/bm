name: Publish BM20 Pages (Hub + Subpages)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "5 22 * * *" # 매일 07:05 KST (UTC 22:05)

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build pages
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # 필요 패키지 명시 설치 (requirements.txt도 병행 가능)
          pip install pandas numpy requests yfinance gspread google-auth google-auth-oauthlib google-auth-httplib2
          pip install reportlab Pillow
          # 있을 경우 requirements.txt도 반영
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Korean fonts (optional)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum
     
      - name: Run BM20 (produce series.json)
        run: |
          mkdir -p out
          python bm20.py \
            --archive archive \
            --out out \
            --base-date 2018-01-01 \
            --base-value 100 \
            --rebalance quarterly \
            --weights-source rules \
            --listed-bonus 1.3 \
            --cap BTC:0.30 --cap ETH:0.20 --cap XRP:0.05 --cap USDT:0.05
        continue-on-error: false

      - name: Ensure series.json exists
        run: |
          test -f out/series.json || (echo "::error::out/series.json missing" && exit 1)

      - name: Build BTC normalized JSON (optional)
        run: |
          python scripts/build_btc_json.py || true

      - name: Stage site (hub + subpages + data)
        run: |
          rm -rf _site && mkdir -p _site

          # Hub (메인)
          cp viewer/index.html _site/index.html

          # Subpages
          cp viewer/bm20-dashboard-viewer.html _site/bm20-dashboard-viewer.html || true
          cp viewer/bm20-vs-btc.html         _site/bm20-vs-btc.html || true
          cp viewer/methodology.html         _site/methodology.html || true

          # Data (루트에 배치)
          cp out/series.json _site/
          [ -f out/btc_series.json ] && cp out/btc_series.json _site/ || true
          [ -f out/latest.json ]     && cp out/latest.json     _site/ || true
          [ -f site/contrib_top.json ] && cp site/contrib_top.json _site/ || true

          touch _site/.nojekyll
          echo "=== _site tree ==="; ls -lah _site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4   # 👈 실제 배포 액션이 반드시 필요

