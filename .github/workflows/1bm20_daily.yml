name: BM20 Daily (Yahoo, 2024-base)

on:
  schedule:
    - cron: "10 23 * * *"   # 매일 08:10 KST (UTC 23:10)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      OUT_DIR: out
      BM20_BASE_DATE: "2024-01-01"
      BM20_BASE_EXCLUDE_CONSISTENT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib python-dateutil reportlab

      - name: Install Korean fonts (Nanum + Noto CJK)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum fonts-noto-cjk fontconfig
          sudo fc-cache -f -v

      # 필요 시 기준일 바꿀 때 캐시 초기화 (옵션)
      - name: Reset base cache (optional)
        run: rm -f out/base_cache.json || true

      - name: Debug — find downCount
        run: |
          echo "Searching for downCount..."
          grep -n "{downCount}" bm20_daily.py || true
          grep -nE '\bdownCount\b' bm20_daily.py || true

      - name: Run BM20 daily
        run: |
          set -euo pipefail
          if [ ! -f bm20_daily.py ]; then
            echo "::error::bm20_daily.py not found at repo root."
            exit 1
          fi
          python bm20_daily.py

      # ✅ 김치/펀딩 추가 (대상 자동 탐지 + 제자리 갱신)
      - name: Enrich latest.json (kimchi & funding)
        run: |
          set -euo pipefail

          pick_latest () {
            for f in "bm20_latest.json" "latest.json" "site/bm20_latest.json" "site/latest.json"; do
              if [ -f "$f" ]; then echo "$f"; return 0; fi
            done
            return 1
          }

          TARGET="$(pick_latest || true)"
          if [ -z "${TARGET:-}" ]; then
            echo "::warning::No latest.json-like file found; skip enrichment"
            exit 0
          fi
          echo "Enrich target: $TARGET"

          python - <<'PY' "$TARGET"
          import json, urllib.request, sys
          target = sys.argv[1]

          def get(url, timeout=12):
              try:
                  req = urllib.request.Request(url, headers={"User-Agent":"BM20-Enrich/1.0"})
                  with urllib.request.urlopen(req, timeout=timeout) as r:
                      return json.loads(r.read().decode("utf-8"))
              except Exception:
                  return None

          def upbit_btc_krw():
              j = get("https://api.upbit.com/v1/ticker?markets=KRW-BTC")
              try: return float(j[0]["trade_price"])
              except Exception: return None

          def binance_px(sym):
              j = get(f"https://api.binance.com/api/v3/ticker/price?symbol={sym}")
              try: return float(j["price"])
              except Exception: return None

          def compute_kimchi():
              krw = upbit_btc_krw()
              usdt = binance_px("BTCUSDT")
              if krw and usdt:
                  try:
                      usdkrw = krw / usdt  # 간단한 암묵 환율
                      return ((krw / usdkrw) / usdt) - 1.0
                  except Exception:
                      return None
              return None

          def fetch_funding():
              out = {}
              j1 = get("https://fapi.binance.com/fapi/v1/premiumIndex?symbol=BTCUSDT")
              if j1 and "lastFundingRate" in j1:
                  try: out["btc"] = float(j1["lastFundingRate"])
                  except Exception: pass
              j2 = get("https://fapi.binance.com/fapi/v1/premiumIndex?symbol=ETHUSDT")
              if j2 and "lastFundingRate" in j2:
                  try: out["eth"] = float(j2["lastFundingRate"])
                  except Exception: pass
              return out or None

          with open(target, "r", encoding="utf-8") as f:
              j = json.load(f)

          k = compute_kimchi()
          fnd = fetch_funding()
          if k is not None: j["kimchi"] = k
          if fnd: j["funding"] = fnd

          tmp = target + ".tmp"
          with open(tmp, "w", encoding="utf-8") as f:
              json.dump(j, f, ensure_ascii=False, indent=2)
          import os; os.replace(tmp, target)
          print("✅ enriched", target)
          PY

      # ✅ 산출물은 루트로 복사 (index.html이 루트에서 읽음) — 동일 파일은 skip
      - name: Prepare site artifacts at repo root
        run: |
          set -euo pipefail

          copy_if_present () {
            src="$1"; dest="$2"
            if [ -f "$src" ]; then
              if [ -f "$dest" ] && [ "$src" -ef "$dest" ]; then
                echo "skip: $src == $dest"
              else
                cp -f "$src" "$dest"
                echo "copied: $src -> $dest"
              fi
            fi
          }

          # latest.json 후보 -> 루트
          copy_if_present latest.json latest.json
          copy_if_present bm20_latest.json latest.json
          copy_if_present site/latest.json latest.json
          copy_if_present site/bm20_latest.json latest.json
          LATEST_IN_OUT=$(find out -maxdepth 2 -type f -name "bm20_latest.json" | sort | tail -n1 || true)
          if [ -n "${LATEST_IN_OUT:-}" ]; then copy_if_present "$LATEST_IN_OUT" latest.json; fi

          # series.json 후보 -> 루트
          copy_if_present series.json series.json
          copy_if_present bm20_series.json series.json
          copy_if_present bm/series.json series.json
          copy_if_present bm/bm20_series.json series.json
          copy_if_present site/series.json series.json
          copy_if_present site/bm20_series.json series.json
          SERIES_IN_OUT=$(find out -maxdepth 2 -type f \( -name "bm20_series.json" -o -name "series.json" \) | sort | tail -n1 || true)
          if [ -n "${SERIES_IN_OUT:-}" ]; then copy_if_present "$SERIES_IN_OUT" series.json; fi

          # 선택: 이미지도 있으면 루트로 동기화(동일 파일 skip)
          for img in bm20_bar_latest.png bm20_trend_latest.png bm20_vs_btc.png; do
            copy_if_present "site/$img" "$img"
          done

          echo "---- present at root ----"
          ls -l latest.json series.json || true
          ls -l bm20_bar_latest.png bm20_trend_latest.png bm20_vs_btc.png || true

      - name: Debug — tree (top 2 levels)
        run: |
          echo "PWD=$(pwd)"
          find . -maxdepth 2 -type f | sort | sed -n '1,200p'

      - name: Commit & Push outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A site \
                     latest.json series.json \
                     bm20_bar_latest.png bm20_trend_latest.png bm20_vs_btc.png || true
          git add -A out/${DATE} || true

          git commit -m "BM20 daily (base=${BM20_BASE_DATE}) ${DATE}" || echo "No changes"
          git pull --rebase
          git push
