name: BM20 Daily (Yahoo, 2024-base)

on:
  schedule:
    - cron: "10 23 * * *"   # Îß§Ïùº 08:10 KST (UTC 23:10)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      OUT_DIR: out
      BM20_BASE_DATE: "2024-01-01"
      BM20_BASE_EXCLUDE_CONSISTENT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib python-dateutil reportlab yfinance

      - name: Install Korean fonts (Nanum + Noto CJK)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum fonts-noto-cjk fontconfig
          sudo fc-cache -f -v

      # ÌïÑÏöî Ïãú Í∏∞Ï§ÄÏùº Î∞îÍøÄ Îïå Ï∫êÏãú Ï¥àÍ∏∞Ìôî (ÏòµÏÖò)
      - name: Reset base cache (optional)
        run: rm -f out/base_cache.json || true

      - name: Debug ‚Äî find downCount
        run: |
          echo "Searching for downCount..."
          grep -n "{downCount}" bm20_daily.py || true
          grep -nE '\bdownCount\b' bm20_daily.py || true

      - name: Run BM20 daily
        run: |
          set -euo pipefail
          python bm20_daily.py

      # ‚úÖ BM20 vs BTC/ETH ÎπÑÍµê ÏßÄÏàò/Ï∞®Ìä∏ ÏÉùÏÑ±
      - name: Build BM20 vs BTC/ETH charts
        run: |
          set -euo pipefail
          python -m scripts.bm20_vs_bench
          

      # ‚úÖ ÍπÄÏπò/ÌéÄÎî© Ï∂îÍ∞Ä
      - name: Enrich latest.json (kimchi & funding)
        run: |
          set -euo pipefail
          python augment_latest.py || echo "enrich failed; keep going"

      - name: Build contrib + perf (Yahoo)
        run: |
          set -euo pipefail
          python contrib_report.py \
            --map bm20_map_btc30.csv \
            --out-dir bm/api

          echo "---- after contrib ----"
          ls -l bm/bm/api || true
       

      - name: Normalize JSON filenames (BM20 canonical + aliases)
        run: |
          set -euo pipefail
          mkdir -p bm bm/api

          # ÏÜåÏä§ ÏÑ†ÌÉù(bm/api Ïö∞ÏÑ†, Í≥ºÍ±∞ Í≤ΩÎ°ú Ìè¥Î∞±)
          pick() { for f in "$@"; do [ -f "$f" ] && { echo "$f"; return; }; done; }
          LATEST_SRC=$(pick bm/api/latest.json site/bm20_latest.json site/latest.json latest.json bm20_latest.json)
          SERIES_SRC=$(pick bm/api/series.json site/bm20_series.json site/series.json series.json bm20_series.json)
          STATS_SRC=$(pick  bm/api/stats.json  site/bm20_stats.json  site/stats.json  stats.json  bm20_stats.json)

          # Ï†ïÏãù ÌååÏùºÎ™Ö ‚Üí bm/bm20_*.json (ÎÇ¥Î∂Ä ÏÜåÎπÑÏûê)
          [ -n "${LATEST_SRC:-}" ] && cp -f "$LATEST_SRC" bm/bm20_latest.json
          [ -n "${SERIES_SRC:-}" ] && cp -f "$SERIES_SRC" bm/bm20_series.json
          [ -n "${STATS_SRC:-}"  ] && cp -f "$STATS_SRC"  bm/bm20_stats.json

          # Î≥ÑÏπ≠(API) ‚Üí bm/api/*.json (Ïô∏Î∂Ä/ÌîÑÎ°†Ìä∏ ÏÜåÎπÑÏûê)
          [ -f bm/bm20_latest.json ] && cp -f bm/bm20_latest.json bm/api/latest.json
          [ -f bm/bm20_series.json ] && cp -f bm/bm20_series.json bm/api/series.json
          [ -f bm/bm20_stats.json  ] && cp -f bm/bm20_stats.json  bm/api/stats.json

          # ÌçºÌè¨Î®ºÏä§/Í∏∞Ïó¨ÎèÑÎèÑ API‚Üíbm Î≥ÑÏπ≠ Ï†úÍ≥µ
          for j in perf_up.json perf_down.json contrib_top.json; do
            [ -f "bm/api/$j" ] && cp -f "bm/api/$j" "bm/$j"
          done

          echo "Aliased:"
          ls -l bm/bm20_*.json bm/*.json bm/api/*.json || true

      - name: Prepare site artifacts to root/  # rootÎäî ÌîÑÎ¶¨Î∑∞/Î≥¥Í∏∞Ïö©Îßå
        run: |
          set -euo pipefail
          SITE_SRC="."
          mkdir -p "$SITE_SRC"

          copy_if_present () {
            src="$1"; dest="$2"
            if [ -f "$src" ]; then
              cp -f "$src" "$SITE_SRC/$dest"
              echo "copied: $src -> $SITE_SRC/$dest"
            fi
          }

          # ‚úÖ API ÌëúÏ§Ä ÏúÑÏπò: bm/api ÏóêÏÑú Î®ºÏ†Ä Í∞ÄÏ†∏Ïò§Í∏∞
          copy_if_present bm/api/latest.json     latest.json
          copy_if_present bm/api/series.json     series.json
          copy_if_present bm/api/stats.json      stats.json
          copy_if_present bm/api/contrib_top.json contrib_top.json
          copy_if_present bm/api/perf_up.json     perf_up.json
          copy_if_present bm/api/perf_down.json   perf_down.json

          # (Ìè¥Î∞±) Í≥ºÍ±∞ Í≤ΩÎ°úÎì§ÏóêÏÑú ÏûàÏúºÎ©¥Îßå ÎçÆÏñ¥Ïì∞Í∏∞
          copy_if_present site/latest.json latest.json
          copy_if_present site/series.json series.json

          echo "---- present at repo root ----"
          ls -l latest.json series.json stats.json contrib_top.json perf_up.json perf_down.json || true

      - name: Publish latest.html (Îâ¥Ïä§Î¶¨Ìè¨Ìä∏)
        run: |
          set -euo pipefail
          python scripts/generate_report.py

      - name: Archive latest report
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)
          mkdir -p archive "archive/${DATE}"

          # 1) latest.html Ïä§ÎÉÖÏÉ∑ Î≥¥Í¥Ä
          if [ -f latest.html ]; then
            cp -f latest.html "archive/${DATE}.html"
          fi

          # 2) (ÏÑ†ÌÉù) Ï∞®Ìä∏/CSVÎèÑ ÎÇ†Ïßú Ìè¥ÎçîÎ°ú Î≥¥Í¥Ä
          for f in bm20_btc_eth_line.png bm20_over_btc.png bm20_over_eth.png bm20_vs_bench.csv; do
            [ -f "$f" ] && cp -f "$f" "archive/${DATE}/" || true
          done

      - name: Ensure perf files exist
        run: |
          set -e
          test -f bm/api/perf_up.json && test -f bm/api/perf_down.json || \
          (echo "::error::perf_up/down.json not created"; exit 1)

      # üîé ÏµúÏã† ÏÇ∞Ï∂úÎ¨º ÎîîÎ†âÌÑ∞Î¶¨ Í≤∞Ï†ï (out/YYYY-MM-DD)
      - name: Find latest output dir
        run: |
          set -euo pipefail
          LATEST_DIR=$(ls -d out/20* 2>/dev/null | sort -r | head -n 1 || true)
          echo "LATEST_DIR=${LATEST_DIR}" >> $GITHUB_ENV
          echo "Latest dir: ${LATEST_DIR:-<none>}"

      # ‚úÖ Publish latest (fixed assets) ‚Äî ÌïÑÏöîÌïú Í≥†Ï†ï ÌååÏùºÎ™ÖÏúºÎ°ú Î≥µÏÇ¨
      - name: Publish latest (fixed assets)
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)

          # HTML
          if [ -n "${LATEST_DIR:-}" ]; then
            HTML_SRC=$(ls "${LATEST_DIR}"/bm20_daily_*.html 2>/dev/null | head -n1 || true)
            [ -n "${HTML_SRC}" ] && cp -f "${HTML_SRC}" latest.html && cp -f latest.html bm/latest.html || true
          fi

          # Ïù¥ÎØ∏ÏßÄ(ÏûàÏùÑ ÎïåÎßå)
          for p in bm20_over_btc bm20_over_eth bm20_btc_eth_line bm20_bar bm20_trend; do
            SRC=$(ls "${LATEST_DIR}/${p}"_*.png 2>/dev/null | head -n1 || true)
            [ -n "${SRC}" ] && cp -f "${SRC}" "${p}_latest.png" || true
          done

          # ÎπÑÍµê CSV/ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑ(ÏûàÏùÑ ÎïåÎßå)
          CSV_SRC=$(ls "${LATEST_DIR}/bm20_vs_bench_"*.csv 2>/dev/null | head -n1 || true)
          [ -n "${CSV_SRC}" ] && cp -f "${CSV_SRC}" bm20_vs_bench.csv || true

          KPNG_SRC=$(ls "${LATEST_DIR}/kimchi_premium_"*.png 2>/dev/null | head -n1 || true)
          [ -n "${KPNG_SRC}" ] && cp -f "${KPNG_SRC}" kimchi_premium_latest.png || true

          KPDF_SRC=$(ls "${LATEST_DIR}/kimchi_premium_"*.pdf 2>/dev/null | head -n1 || true)
          [ -n "${KPDF_SRC}" ] && cp -f "${KPDF_SRC}" kimchi_premium_latest.pdf || true

      - name: Show git status (debug)
        run: |
          git status --porcelain
          echo "---- staged ----"
          git diff --cached --name-only || true

      - name: Commit & Push outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add \
            bm/bm20_*.json bm/*.json bm/api/*.json \
            latest.json series.json stats.json contrib_top.json perf_up.json perf_down.json \
            bm20_vs_bench.csv \
            bm20_btc_eth_line_latest.png bm20_over_btc_latest.png bm20_over_eth_latest.png \
            bm20_bar_latest.png bm20_trend_latest.png \
            kimchi_premium_latest.png kimchi_premium_latest.pdf \
            latest.html bm/latest.html \
            archive/*.html || true

          # ÎÇ†Ïßú ÏïÑÏπ¥Ïù¥Î∏å(ÏûàÏúºÎ©¥)
          if [ -n "${LATEST_DIR:-}" ] && [ -d "${LATEST_DIR}" ]; then
            git add "${LATEST_DIR}" || true
          fi
          DATE=$(TZ=Asia/Seoul date +%F)
          if [ -d "archive/${DATE}" ]; then
            git add "archive/${DATE}"/* || true
          fi

          git commit -m "BM20 daily: publish latest fixed assets + API" || echo "No changes"
          git push
   
