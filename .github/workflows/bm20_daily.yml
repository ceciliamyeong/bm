name: BM20 Daily (Yahoo, 2024-base)

on:
  schedule:
    - cron: "10 23 * * *"   # 매일 08:10 KST (UTC 23:10)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      OUT_DIR: out
      BM20_BASE_DATE: "2024-01-01"
      BM20_BASE_EXCLUDE_CONSISTENT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib python-dateutil reportlab yfinance

      - name: Install Korean fonts (Nanum + Noto CJK)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum fonts-noto-cjk fontconfig
          sudo fc-cache -f -v

      # 필요 시 기준일 바꿀 때 캐시 초기화 (옵션)
      - name: Reset base cache (optional)
        run: rm -f out/base_cache.json || true

      - name: Debug — find downCount
        run: |
          echo "Searching for downCount..."
          grep -n "{downCount}" bm20_daily.py || true
          grep -nE '\bdownCount\b' bm20_daily.py || true

      - name: Run BM20 daily
        run: |
          set -euo pipefail
          if [ ! -f bm20_daily.py ]; then
            echo "::error::bm20_daily.py not found at repo root."
            exit 1
          fi
          python bm20_daily.py

      # ✅ BM20 vs BTC/ETH 비교 지수/차트 생성
      - name: Build BM20 vs BTC/ETH charts
        run: |
          set -euo pipefail
          python -m scripts.bm20_vs_bench

      # ✅ 김치/펀딩 추가
      - name: Enrich latest.json (kimchi & funding)
        run: |
          set -euo pipefail
          python augment_latest.py || echo "enrich failed; keep going"

      - name: Build contrib + perf (Yahoo)
        run: |
          set -euo pipefail
          python contrib_report.py \
            --map bm20_map_btc30.csv \
            --out-json bm/bm/api/contrib_top.json

          echo "---- after contrib ----"
          ls -l bm/bm/api || true
       
      - name: Normalize JSON filenames (BM20 canonical + aliases)
        run: |
          set -euo pipefail
          mkdir -p bm bm/api

          # 소스 선택(bm/api 우선, 과거 경로 폴백)
          pick() { for f in "$@"; do [ -f "$f" ] && { echo "$f"; return; }; done; }
          LATEST_SRC=$(pick bm/api/latest.json site/bm20_latest.json site/latest.json latest.json bm20_latest.json)
          SERIES_SRC=$(pick bm/api/series.json site/bm20_series.json site/series.json series.json bm20_series.json)
          STATS_SRC=$(pick  bm/api/stats.json  site/bm20_stats.json  site/stats.json  stats.json  bm20_stats.json)

          # 정식 파일명 → bm/bm20_*.json (메인이 이걸 읽음)
          [ -n "${LATEST_SRC:-}" ] && cp -f "$LATEST_SRC" bm/bm20_latest.json
          [ -n "${SERIES_SRC:-}" ] && cp -f "$SERIES_SRC" bm/bm20_series.json
          [ -n "${STATS_SRC:-}"  ] && cp -f "$STATS_SRC"  bm/bm20_stats.json

          # 별칭(API) → bm/api/*.json (외부/다른 소비자용)
          [ -f bm/bm20_latest.json ] && cp -f bm/bm20_latest.json bm/api/latest.json
          [ -f bm/bm20_series.json ] && cp -f bm/bm20_series.json bm/api/series.json
          [ -f bm/bm20_stats.json  ] && cp -f bm/bm20_stats.json  bm/api/stats.json

          # 퍼포먼스/기여도도 API→bm 별칭 제공
          for j in perf_up.json perf_down.json contrib_top.json; do
            [ -f "bm/api/$j" ] && cp -f "bm/api/$j" "bm/$j"
          done

          echo "Aliased:"
          ls -l bm/bm20_*.json bm/*.json bm/api/*.json || true



      - name: Prepare site artifacts to root/  # root는 프리뷰/보기용만
        run: |
          set -euo pipefail

          SITE_SRC="."
          mkdir -p "$SITE_SRC"

          copy_if_present () {
            src="$1"; dest="$2"
            if [ -f "$src" ]; then
              cp -f "$src" "$SITE_SRC/$dest"
              echo "copied: $src -> $SITE_SRC/$dest"
            fi
          }

          # ✅ API 표준 위치: bm/api 에서 먼저 가져오기
          copy_if_present bm/api/latest.json  latest.json
          copy_if_present bm/api/series.json  series.json
          copy_if_present bm/api/stats.json   stats.json
          copy_if_present bm/api/contrib_top.json contrib_top.json
          copy_if_present bm/api/perf_up.json    perf_up.json
          copy_if_present bm/api/perf_down.json  perf_down.json

          # (폴백) 과거 경로들에서 있으면만 덮어쓰기
          copy_if_present site/latest.json latest.json
          copy_if_present site/series.json series.json
          LATEST_IN_OUT=$(find out -maxdepth 2 -type f -name "latest.json" -o -name "bm20_latest.json" | sort | tail -n1 || true)
          [ -n "${LATEST_IN_OUT:-}" ] && copy_if_present "$LATEST_IN_OUT" latest.json

          SERIES_IN_OUT=$(find out -maxdepth 2 -type f -name "series.json" -o -name "bm20_index_history.json" -o -name "bm20_series.json" | sort | tail -n1 || true)
          [ -n "${SERIES_IN_OUT:-}" ] && copy_if_present "$SERIES_IN_OUT" series.json

          echo "---- present at repo root ----"
          ls -l latest.json series.json stats.json contrib_top.json perf_up.json perf_down.json || true


      - name: Debug — tree (top 2 levels)
        run: |
          echo "PWD=$(pwd)"
          find . -maxdepth 2 -type f | sort | sed -n '1,200p'

      - name: Publish latest.html (뉴스리포트)
        run: |
          set -euo pipefail
          python scripts/generate_report.py

      - name: Archive latest report
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)

          # 1) latest.html 스냅샷 보관
          mkdir -p archive
          if [ -f latest.html ]; then
            cp -f latest.html "archive/${DATE}.html"
          fi

          # 2) (선택) 차트/CSV도 날짜 폴더로 보관
          mkdir -p "archive/${DATE}"
          for f in bm20_btc_eth_line.png bm20_over_btc.png bm20_over_eth.png bm20_vs_bench.csv; do
            [ -f "$f" ] && cp -f "$f" "archive/${DATE}/" || true
          done

      
      - name: Ensure perf files exist
        run: |
          set -e
          test -f bm/bm/api/perf_up.json && test -f bm/bm/api/perf_down.json || \
          (echo "::error::perf_up/down.json not created"; exit 1)
      
      - name: Show git status (debug)
        run: |
          git status --porcelain
          echo "---- staged ----"
          git diff --cached --name-only || true



      - name: Commit & Push outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
          # 🟢 아카이브 산출물을 표준 이름으로 복사 (latest.json 등)
          # JSON
          [ -f "bm/api/latest.json" ] && cp -f "bm/api/latest.json" latest.json
          [ -f "bm/api/series.json" ] && cp -f "bm/api/series.json" series.json
          [ -f "bm/api/contrib_top.json" ] && cp -f "bm/api/contrib_top.json" contrib_top.json
          [ -f "bm/api/perf_up.json" ] && cp -f "bm/api/perf_up.json" perf_up.json
          [ -f "bm/api/perf_down.json" ] && cp -f "bm/api/perf_down.json" perf_down.json
      
          # PNG (차트 이미지)
          [ -f "bm/bm20_bar_latest.png" ] && cp -f "bm/bm20_bar_latest.png" bm20_bar_latest.png
          [ -f "bm/bm20_trend_latest.png" ] && cp -f "bm/bm20_trend_latest.png" bm20_trend_latest.png
      
          # HTML (리포트)
          [ -f "out/${DATE}/bm20_daily_${DATE}.html" ] && cp -f "out/${DATE}/bm20_daily_${DATE}.html" latest.html && cp -f latest.html bm/latest.html
      
          # 이제 git add
          git add \
            bm/bm20_*.json bm/*.json bm/api/*.json \
            latest.json series.json contrib_top.json perf_up.json perf_down.json \
            bm20_vs_bench.csv \
            bm20_btc_eth_line.png bm20_over_btc.png bm20_over_eth.png \
            latest.html bm/latest.html \
            bm20_bar_latest.png bm20_trend_latest.png \
            "out/${DATE}" || true
      
          git add archive/*.html || true
          if [ -d "archive/${DATE}" ]; then
            git add "archive/${DATE}"/* || true
          fi
      
          git commit -m "BM20 daily: normalize filenames + aliases" || echo "No changes"
          git push
      


          git commit -m "BM20 daily: normalize filenames + aliases" || echo "No changes"
          git push

