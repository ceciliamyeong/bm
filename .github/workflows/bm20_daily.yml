name: BM20 Daily (Yahoo, 2024-base)

on:
  schedule:
    - cron: "10 23 * * *"   # Îß§Ïùº 08:10 KST (UTC 23:10)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      OUT_DIR: out
      BM20_BASE_DATE: "2024-01-01"
      BM20_BASE_EXCLUDE_CONSISTENT: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests pandas matplotlib python-dateutil reportlab yfinance

      - name: Install Korean fonts (Nanum + Noto CJK)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-nanum fonts-noto-cjk fontconfig
          sudo fc-cache -f -v

      # ÌïÑÏöî Ïãú Í∏∞Ï§ÄÏùº Î∞îÍøÄ Îïå Ï∫êÏãú Ï¥àÍ∏∞Ìôî (ÏòµÏÖò)
      - name: Reset base cache (optional)
        run: rm -f out/base_cache.json || true

      - name: Debug ‚Äî find downCount
        run: |
          echo "Searching for downCount..."
          grep -n "{downCount}" bm20_daily.py || true
          grep -nE '\bdownCount\b' bm20_daily.py || true

      - name: Run BM20 daily
        run: |
          set -euo pipefail
          python bm20_daily.py

      # ‚úÖ BM20 vs BTC/ETH ÎπÑÍµê ÏßÄÏàò/Ï∞®Ìä∏ ÏÉùÏÑ±
      - name: Build BM20 vs BTC/ETH charts
        run: |
          set -euo pipefail
          python -m scripts.bm20_vs_bench
          

      # ‚úÖ ÍπÄÏπò/ÌéÄÎî© Ï∂îÍ∞Ä
      - name: Enrich latest.json (kimchi & funding)
        run: |
          set -euo pipefail
          python augment_latest.py || echo "enrich failed; keep going"

      - name: Build contrib + perf (Yahoo)
        run: |
          set -euo pipefail
          python contrib_report.py \
            --map bm20_map_btc30.csv \
            --out-dir api 

          echo "---- after contrib ----"
          ls -l bm/bm/api || true
       

      - name: Normalize JSON filenames (BM20 canonical + aliases)
        run: |
          set -euo pipefail
          mkdir -p bm bm/api

          # ÏÜåÏä§ ÏÑ†ÌÉù(bm/api Ïö∞ÏÑ†, Í≥ºÍ±∞ Í≤ΩÎ°ú Ìè¥Î∞±)
          pick() { for f in "$@"; do [ -f "$f" ] && { echo "$f"; return; }; done; }
          LATEST_SRC=$(pick bm/api/latest.json site/bm20_latest.json site/latest.json latest.json bm20_latest.json)
          SERIES_SRC=$(pick bm/api/series.json site/bm20_series.json site/series.json series.json bm20_series.json)
          STATS_SRC=$(pick  bm/api/stats.json  site/bm20_stats.json  site/stats.json  stats.json  bm20_stats.json)

          # Ï†ïÏãù ÌååÏùºÎ™Ö ‚Üí bm/bm20_*.json (ÎÇ¥Î∂Ä ÏÜåÎπÑÏûê)
          [ -n "${LATEST_SRC:-}" ] && cp -f "$LATEST_SRC" bm/bm20_latest.json
          [ -n "${SERIES_SRC:-}" ] && cp -f "$SERIES_SRC" bm/bm20_series.json
          [ -n "${STATS_SRC:-}"  ] && cp -f "$STATS_SRC"  bm/bm20_stats.json

          # Î≥ÑÏπ≠(API) ‚Üí bm/api/*.json (Ïô∏Î∂Ä/ÌîÑÎ°†Ìä∏ ÏÜåÎπÑÏûê)
          [ -f bm/bm20_latest.json ] && cp -f bm/bm20_latest.json bm/api/latest.json
          [ -f bm/bm20_series.json ] && cp -f bm/bm20_series.json bm/api/series.json
          [ -f bm/bm20_stats.json  ] && cp -f bm/bm20_stats.json  bm/api/stats.json

          # ÌçºÌè¨Î®ºÏä§/Í∏∞Ïó¨ÎèÑÎèÑ API‚Üíbm Î≥ÑÏπ≠ Ï†úÍ≥µ
          for j in perf_up.json perf_down.json contrib_top.json; do
            [ -f "bm/api/$j" ] && cp -f "bm/api/$j" "bm/$j"
          done

          echo "Aliased:"
          ls -l bm/bm20_*.json bm/*.json bm/api/*.json || true

      - name: Prepare site artifacts to root/  # rootÎäî ÌîÑÎ¶¨Î∑∞/Î≥¥Í∏∞Ïö©Îßå
        run: |
          set -euo pipefail
          SITE_SRC="."
          mkdir -p api
          # ÌëúÏ§Ä ÏúÑÏπò(Ïù¥ÎØ∏ apiÏóê ÏûàÏùåÏù¥Î©¥ Ïä§ÌÇµ Í∞ÄÎä•)
          [ -f api/latest.json ]  && echo ready latest.json
          [ -f api/contrib_top.json ] && echo ready contrib_top.json
          [ -f api/perf_up.json ]  && echo ready perf_up.json
          [ -f api/perf_down.json ] && echo ready perf_down.json
          echo "---- present at repo root ----"
          ls -l latest.html api/*.json || true

      - name: Publish latest.html (Îâ¥Ïä§Î¶¨Ìè¨Ìä∏)
        run: |
          set -euo pipefail
          python scripts/generate_report.py

      - name: Archive latest report
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)
          mkdir -p archive "archive/${DATE}"

          # 1) latest.html Ïä§ÎÉÖÏÉ∑ Î≥¥Í¥Ä
          if [ -f latest.html ]; then
            cp -f latest.html "archive/${DATE}.html"
          fi

          # 2) (ÏÑ†ÌÉù) Ï∞®Ìä∏/CSVÎèÑ ÎÇ†Ïßú Ìè¥ÎçîÎ°ú Î≥¥Í¥Ä
          for f in bm20_btc_eth_line.png bm20_over_btc.png bm20_over_eth.png bm20_vs_bench.csv; do
            [ -f "$f" ] && cp -f "$f" "archive/${DATE}/" || true
          done

      - name: Ensure perf files exist
        run: |
          set -e
          test -f api/perf_up.json && test -f api/perf_down.json || \
          (echo "::error::perf_up/down.json not created"; exit 1)

      # üîé ÏµúÏã† ÏÇ∞Ï∂úÎ¨º ÎîîÎ†âÌÑ∞Î¶¨ Í≤∞Ï†ï (out/YYYY-MM-DD)
      - name: Find latest output dir
        run: |
          set -euo pipefail
          LATEST_DIR=$(ls -d out/20* 2>/dev/null | sort -r | head -n 1 || true)
          echo "LATEST_DIR=${LATEST_DIR}" >> $GITHUB_ENV
          echo "Latest dir: ${LATEST_DIR:-<none>}"

      # ‚úÖ Publish latest (fixed assets) ‚Äî ÌïÑÏöîÌïú Í≥†Ï†ï ÌååÏùºÎ™ÖÏúºÎ°ú Î≥µÏÇ¨
      - name: Publish latest (fixed assets)
        run: |
          set -euo pipefail
          DATE=$(TZ=Asia/Seoul date +%F)

          # HTML
          if [ -n "${LATEST_DIR:-}" ]; then
            HTML_SRC=$(ls "${LATEST_DIR}"/bm20_daily_*.html 2>/dev/null | head -n1 || true)
            [ -n "${HTML_SRC}" ] && cp -f "${HTML_SRC}" latest.html && cp -f latest.html bm/latest.html || true
          fi

          # Ïù¥ÎØ∏ÏßÄ(ÏûàÏùÑ ÎïåÎßå)
          for p in bm20_over_btc bm20_over_eth bm20_btc_eth_line bm20_bar bm20_trend; do
            SRC=$(ls "${LATEST_DIR}/${p}"_*.png 2>/dev/null | head -n1 || true)
            [ -n "${SRC}" ] && cp -f "${SRC}" "${p}_latest.png" || true
          done

          # ÎπÑÍµê CSV/ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑ(ÏûàÏùÑ ÎïåÎßå)
          CSV_SRC=$(ls "${LATEST_DIR}/bm20_vs_bench_"*.csv 2>/dev/null | head -n1 || true)
          [ -n "${CSV_SRC}" ] && cp -f "${CSV_SRC}" bm20_vs_bench.csv || true

          KPNG_SRC=$(ls "${LATEST_DIR}/kimchi_premium_"*.png 2>/dev/null | head -n1 || true)
          [ -n "${KPNG_SRC}" ] && cp -f "${KPNG_SRC}" kimchi_premium_latest.png || true

          KPDF_SRC=$(ls "${LATEST_DIR}/kimchi_premium_"*.pdf 2>/dev/null | head -n1 || true)
          [ -n "${KPDF_SRC}" ] && cp -f "${KPDF_SRC}" kimchi_premium_latest.pdf || true

      - name: Show git status (debug)
        run: |
          git status --porcelain
          echo "---- staged ----"
          git diff --cached --name-only || true

          # ---- Create live JSON (index_today.json) ----
      - name: Generate live JSON
        run: |
          mkdir -p site/live || true
          python - << 'PY'
          import json, os, csv, datetime
          from pathlib import Path
          
          # Ïö∞ÏÑ†ÏàúÏúÑ: out/latest/bm20_latest.json -> out/latest/latest.json -> out/history/bm20_index_history.csv
          def read_first_json(paths):
              for p in paths:
                  if Path(p).exists():
                      try:
                          return json.load(open(p, "r", encoding="utf-8"))
                      except Exception:
                          pass
              return None
          
          latest = read_first_json([
              "out/latest/bm20_latest.json",
              "out/latest/latest.json",
              "bm20_latest.json",
              "latest.json"
          ])
          
          # Í∏∞Î≥∏ Ïä§ÏºàÎ†àÌÜ§
          payload = {
            "date": None,
            "index_level": None,
            "d1_chg_pct": None,
            "btc_usd": None,
            "eth_usd": None,
            "best3": [],
            "worst3": [],
          }
          
          if latest:
              payload["date"] = latest.get("date") or latest.get("asof")
              payload["index_level"] = latest.get("bm20_index") or latest.get("index_level")
              payload["d1_chg_pct"] = latest.get("bm20_d1_pct") or latest.get("d1_chg_pct")
              payload["btc_usd"] = latest.get("btc_usd") or latest.get("btc")
              payload["eth_usd"] = latest.get("eth_usd") or latest.get("eth")
              # best/worst ÌÇ§ Ïù¥Î¶ÑÏù¥ Îã§Î•º Ïàò ÏûàÏñ¥ Ïú†Ïó∞ Ï≤òÎ¶¨
              b3 = latest.get("best3") or latest.get("best") or latest.get("top")
              w3 = latest.get("worst3") or latest.get("worst") or latest.get("bottom")
              def norm(items):
                  out=[]
                  if isinstance(items, list):
                      for it in items[:3]:
                          if isinstance(it, dict):
                              out.append({"symbol": it.get("symbol") or it.get("ticker") or it.get("code"),
                                          "name": it.get("name") or it.get("symbol"),
                                          "pct": it.get("pct") or it.get("change_pct")})
                          elif isinstance(it, (list,tuple)) and len(it)>=2:
                              out.append({"symbol": it[0], "name": it[0], "pct": it[1]})
                  return out
              payload["best3"] = norm(b3)
              payload["worst3"] = norm(w3)
          
          # Ìè¥Î∞±: history CSVÏóêÏÑú ÏµúÏã† ÌñâÎßå
          if not payload["index_level"]:
              hist = Path("out/history/bm20_index_history.csv")
              if hist.exists():
                  rows = list(csv.DictReader(open(hist, newline="", encoding="utf-8")))
                  if rows:
                      last = rows[-1]
                      payload["date"] = last.get("date")
                      payload["index_level"] = float(last.get("bm20_index") or last.get("index") or 0) or None
                      # Ï†ÑÏùº ÎåÄÎπÑÎäî CSVÏóê ÏóÜÏúºÎ©¥ Í≥ÑÏÇ∞ ÏÉùÎûµ(ÌîÑÎ°†Ìä∏ÏóêÏÑú N/A Ï≤òÎ¶¨)
          
          # ÏµúÏ¢Ö ÏïàÏ†ÑÏû•Ïπò(ÎÇ†Ïßú ÏóÜÏúºÎ©¥ Ïò§Îäò ÎÇ†Ïßú)
          if not payload["date"]:
              payload["date"] = datetime.date.today().isoformat()
          
          # Ï†ÄÏû•
          Path("site/live").mkdir(parents=True, exist_ok=True)
          with open("site/live/index_today.json", "w", encoding="utf-8") as f:
              json.dump(payload, f, ensure_ascii=False, indent=2)
          print("WROTE site/live/index_today.json")
          PY
          
          # ---- Create live page (Jekyll) ----
          - name: Create live page
            run: |
              mkdir -p site/live
              cat > site/live/index.html << 'HTML'
          ---
          layout: default
          title: BM20 Live
          permalink: /bm/live/
          ---
          
          <div id="bm20-live" style="max-width:900px;margin:24px auto;">
            <h2 style="margin-bottom:8px;">BM20 Live</h2>
            <div id="asof" style="opacity:.8;margin-bottom:16px;">Loading...</div>
          
            <div style="display:flex;gap:16px;flex-wrap:wrap;">
              <div style="flex:1 1 220px;border:1px solid #eee;border-radius:8px;padding:16px;">
                <div style="font-weight:600;margin-bottom:6px;">Index</div>
                <div id="index_level" style="font-size:28px;">‚Äî</div>
                <div id="d1" style="margin-top:4px;">‚Äî</div>
              </div>
              <div style="flex:1 1 220px;border:1px solid #eee;border-radius:8px;padding:16px;">
                <div style="font-weight:600;margin-bottom:6px;">BTC / ETH</div>
                <div id="btc" style="margin-bottom:4px;">BTC: ‚Äî</div>
                <div id="eth">ETH: ‚Äî</div>
              </div>
            </div>
          
            <div style="display:flex;gap:16px;flex-wrap:wrap;margin-top:16px;">
              <div style="flex:1 1 380px;border:1px solid #eee;border-radius:8px;padding:16px;">
                <div style="font-weight:600;margin-bottom:8px;">Best 3</div>
                <ol id="best3" style="margin:0;padding-left:18px;"></ol>
              </div>
              <div style="flex:1 1 380px;border:1px solid #eee;border-radius:8px;padding:16px;">
                <div style="font-weight:600;margin-bottom:8px;">Worst 3</div>
                <ol id="worst3" style="margin:0;padding-left:18px;"></ol>
              </div>
            </div>
          </div>
          
          <script>
          (async () => {
            const base = "{{ site.baseurl }}";
            const url = `${base}/live/index_today.json?v={{ site.time | date: "%s" }}`;
            try {
              const r = await fetch(url, {cache: "no-store"});
              const j = await r.json();
          
              const fmt = (x) => (x==null||isNaN(x)) ? "‚Äî" : Number(x).toLocaleString(undefined, {maximumFractionDigits: 2});
              const pct = (x) => (x==null||isNaN(x)) ? "‚Äî" : ((x>=0?"+":"") + (x*100).toFixed(2) + "%");
          
              document.getElementById("asof").textContent = `as of ${j.date}`;
              document.getElementById("index_level").textContent = fmt(j.index_level);
              const d1 = document.getElementById("d1");
              d1.textContent = pct(j.d1_chg_pct);
              d1.style.color = (j.d1_chg_pct||0) >= 0 ? "#2E7D32" : "#C62828";
              document.getElementById("btc").textContent = `BTC: ${fmt(j.btc_usd)} USD`;
              document.getElementById("eth").textContent = `ETH: ${fmt(j.eth_usd)} USD`;
          
              const fillList = (id, arr) => {
                const el = document.getElementById(id);
                el.innerHTML = "";
                (arr||[]).forEach(it => {
                  const li = document.createElement("li");
                  const name = it.name || it.symbol || "‚Äî";
                  const pctv = (it.pct!=null && !isNaN(it.pct)) ? ((it.pct*100).toFixed(2)+"%") : "‚Äî";
                  li.textContent = `${name} (${pctv})`;
                  el.appendChild(li);
                });
              };
              fillList("best3", j.best3);
              fillList("worst3", j.worst3);
            } catch (e) {
              document.getElementById("asof").textContent = "Failed to load live data.";
            }
          })();
          </script>
          HTML


      - name: Commit & Push outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add \
            git add api/*.json latest.html archive/* || true
            git add bm20_*.png *.png *.csv || true  # ÌïÑÏöîÌïú ÏÇ∞Ï∂úÎ¨ºÎßå
            git commit -m "BM20 daily: publish api/ + latest.html" || echo "No changes"
            git push

          # ÎÇ†Ïßú ÏïÑÏπ¥Ïù¥Î∏å(ÏûàÏúºÎ©¥)
          if [ -n "${LATEST_DIR:-}" ] && [ -d "${LATEST_DIR}" ]; then
            git add "${LATEST_DIR}" || true
          fi
          DATE=$(TZ=Asia/Seoul date +%F)
          if [ -d "archive/${DATE}" ]; then
            git add "archive/${DATE}"/* || true
          fi

          git commit -m "BM20 daily: publish latest fixed assets + API" || echo "No changes"
          git push
   
