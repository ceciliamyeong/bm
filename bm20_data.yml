name: BM20 Data → JSON (root commit)

on:
  schedule:
    - cron: "10 23 * * *"   # 매일 08:10 KST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      # 구글시트 "웹에 게시" CSV 주소 (index_history 탭)
      SHEET_CSV_URL: "https://docs.google.com/spreadsheets/d/e/2PACX-1vTndyrPd3WWwFtfzv2CZxJeDcH-l8ibQIdO5ouYS4HsaGpbeXQQbs6WEr9qPqqZbRoT6cObdFxJpief/pub?gid=1685318213&single=true&output=csv"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Generate latest.json / series.json at repo ROOT
        run: |
          python - << 'PY'
          import csv, io, json, sys, urllib.request, datetime as dt, math

          CSV_URL = "${{ env.SHEET_CSV_URL }}".strip()
          if not CSV_URL:
              print("[ERROR] SHEET_CSV_URL is empty", file=sys.stderr); sys.exit(1)

          def fetch_csv(url: str) -> str:
              with urllib.request.urlopen(url) as r:
                  return r.read().decode("utf-8", errors="replace")

          raw = fetch_csv(CSV_URL)
          rdr = csv.DictReader(io.StringIO(raw))

          rows = []
          for r in rdr:
              def get(*names, default=""):
                  for n in names:
                      for k,v in r.items():
                          if k and k.strip().lower().replace(" ","").replace("_","") == n.lower().replace("_",""):
                              return v
                  return default
              d  = get("date","일자","day","asof","as_of").strip()
              lv = get("bm20_index","bm20index","bm20_level","level","index","close","value").strip()
              try:
                  if "/" in d and d.count("/") == 2:
                      m, n, y = d.split("/")
                      if len(y)==2: y="20"+y
                      d = f"{int(y):04d}-{int(m):02d}-{int(n):02d}"
                  elif "-" in d and d.count("-") == 2:
                      y,m,n = d.split("-"); d = f"{int(y):04d}-{int(m):02d}-{int(n):02d}"
                  else:
                      continue
                  v = float(lv.replace(",",""))
                  if math.isfinite(v): rows.append({"date": d, "value": v})
              except: pass

          rows.sort(key=lambda x: x["date"])
          if not rows:
              print("[ERROR] No rows parsed from CSV", file=sys.stderr); sys.exit(1)

          # series.json
          with open("series.json","w",encoding="utf-8") as w:
              json.dump(rows, w, ensure_ascii=False)

          # latest.json
          by = {r["date"]: r["value"] for r in rows}
          dates = [r["date"] for r in rows]
          last_d, last_v = dates[-1], by[dates[-1]]

          def pct(a,b):
              try: return (a/b - 1.0)
              except: return None
          def find(days):
              base = dt.datetime.strptime(last_d, "%Y-%m-%d").date()
              want = base - dt.timedelta(days=days)
              for d in reversed(dates):
                  if d <= want.isoformat(): return d

          r1d  = pct(last_v, by.get(find(1)))
          r7d  = pct(last_v, by.get(find(7)))
          r30d = pct(last_v, by.get(find(30)))
          r1y  = pct(last_v, by.get(find(365)))
          y0 = f"{int(last_d[:4])}-01-01"
          y0d = next((d for d in dates if d >= y0), None)
          rytd= pct(last_v, by.get(y0d)) if y0d else None

          latest = {
              "asOf": last_d,
              "level": round(last_v, 4),
              "returns": {"1D": r1d, "7D": r7d, "30D": r30d, "YTD": rytd, "1Y": r1y}
          }
          with open("latest.json","w",encoding="utf-8") as w:
              json.dump(latest, w, ensure_ascii=False, indent=2)

          print(f"[OK] latest.json @ {last_d} level={last_v}")
          PY

      - name: Commit & push to ROOT (no deploy step)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add latest.json series.json
          git commit -m "chore: BM20 JSON update" || echo "No changes"
          git pull --rebase
          git push
